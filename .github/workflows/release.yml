name: Build & Release (robust)

on:
  push:
    tags:
      - "v*"          # v1.2.3 같은 태그
      - "[0-9]*"      # 1.2.3 같이 v 없는 태그도 허용 (glob)
  create:             # GitHub UI에서 태그만 만든 경우
  workflow_dispatch:  # 수동 실행

permissions:
  contents: write

env:
  PYTHON_VERSION: "3.11"

  # 앱 이름/엔트리(필요에 맞게 바꾸세요)
  EDITOR_APPNAME: "BranchingNovelEditor"
  GAME_APPNAME: "BranchingNovelGUI"
  EDITOR_ENTRY: "branching_novel_editor.py"
  GAME_ENTRY: "branching_novel.py"
  EDITOR_EXE: "BranchingNovelEditor.exe"
  GAME_EXE: "BranchingNovelGUI.exe"

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'create' && github.event.ref_type == 'tag') ||
      (github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Resolve tag
        id: rtag
        shell: bash
        run: |
          tag="${GITHUB_REF##refs/tags/}"
          [ -z "$tag" ] && tag="${{ github.event.ref }}"
          [ -z "$tag" ] && tag="${{ github.ref_name }}"
          version="${tag#v}"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Install deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-build.txt
          pip install pyinstaller pillow

      - name: Optional icon (.ico) from PNG
        shell: pwsh
        continue-on-error: true
        run: |
          $code = @'
          from PIL import Image
          import os
          def make_icon(png, ico):
            if os.path.exists(png):
              src = Image.open(png).convert("RGBA")
              sizes = [(16,16),(24,24),(32,32),(48,48),(64,64),(128,128),(256,256)]
              src.save(ico, format="ICO", sizes=sizes)
          make_icon("assets/icons/appicon.png", "assets/icons/app.ico")
          make_icon("assets/icons/editoricon.png", "assets/icons/editor.ico")
          '@
          Set-Content gen_ico.py $code -Encoding UTF8
          python gen_ico.py

      - name: Write version info files
        shell: pwsh
        run: |
          $ver='${{ steps.rtag.outputs.version }}'
          $fv=($ver.Split('.') + '0' + '0' + '0')[0..3] -join ','
          ((Get-Content 'version-file-template.txt') -replace 'APP_NAME', $env:EDITOR_APPNAME -replace 'APP_VERSION', $ver -replace 'FILE_VERSION_COMMAS', $fv) |
            Set-Content 'verinfo-editor.txt' -Encoding UTF8
          ((Get-Content 'version-file-template.txt') -replace 'APP_NAME', $env:GAME_APPNAME -replace 'APP_VERSION', $ver -replace 'FILE_VERSION_COMMAS', $fv) |
            Set-Content 'verinfo-game.txt' -Encoding UTF8

      - name: Build Editor (folder mode)
        shell: pwsh
        run: |
          $iconArgs = @()
          if (Test-Path 'assets/icons/editor.ico') { $iconArgs += @('--icon','assets/icons/editor.ico') }
          pyinstaller --noconfirm --windowed --onedir --noupx --clean --version-file verinfo-editor.txt -n $env:EDITOR_APPNAME @iconArgs $env:EDITOR_ENTRY
          if (!(Test-Path "dist/$env:EDITOR_APPNAME")) { Write-Error "Editor dist missing"; exit 1 }

      - name: Build Game (folder mode)
        shell: pwsh
        run: |
          $iconArgs = @()
          if (Test-Path 'assets/icons/app.ico') { $iconArgs += @('--icon','assets/icons/app.ico') }
          pyinstaller --noconfirm --windowed --onedir --noupx --clean --version-file verinfo-game.txt -n $env:GAME_APPNAME @iconArgs $env:GAME_ENTRY
          if (!(Test-Path "dist/$env:GAME_APPNAME")) { Write-Error "Game dist missing"; exit 1 }

      - name: Package ZIPs + latest.* for online installers
        shell: pwsh
        run: |
          $ver='${{ steps.rtag.outputs.version }}'
          New-Item -ItemType Directory -Force -Path release | Out-Null

          $ezip = "release/${env:EDITOR_APPNAME}-$ver-windows-x64.zip"
          Compress-Archive -Path "dist/${env:EDITOR_APPNAME}/*" -DestinationPath $ezip
          if (!(Test-Path $ezip)) { Write-Error "Editor zip missing"; exit 1 }
          Copy-Item $ezip "release/latest-editor.zip" -Force
          $eh = (Get-FileHash "release/latest-editor.zip" -Algorithm SHA256).Hash.ToLower()
          "$eh  latest-editor.zip" | Out-File -Encoding ascii "release/latest-editor.sha256"
          if (!(Test-Path "release/latest-editor.sha256")) { Write-Error "latest-editor.sha256 missing"; exit 1 }

          $gzip = "release/game-$ver-windows-x64.zip"
          Compress-Archive -Path "dist/${env:GAME_APPNAME}/*" -DestinationPath $gzip
          if (!(Test-Path $gzip)) { Write-Error "Game zip missing"; exit 1 }
          $gh = (Get-FileHash $gzip -Algorithm SHA256).Hash.ToLower()
          "$gh  game-$ver-windows-x64.zip" | Out-File -Encoding ascii "release/game-$ver-windows-x64.sha256"
          Copy-Item $gzip "release/latest-game.zip" -Force
          "$gh  latest-game.zip" | Out-File -Encoding ascii "release/latest-game.sha256"
          if (!(Test-Path "release/latest-game.sha256")) { Write-Error "latest-game.sha256 missing"; exit 1 }

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: release/*

      - name: Upload icon artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-icon
          path: assets/icons/app.ico

      - name: Upload editor icon artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: editor-icon
          path: assets/icons/editor.ico

  build-inno-installers:
    name: Build Windows Online Installers
    runs-on: windows-latest
    needs: build-windows
    if: ${{ needs.build-windows.result == 'success' }}
    steps:
      - uses: actions/checkout@v4
      - name: Resolve tag
        id: rtag
        shell: bash
        run: |
          tag="${GITHUB_REF##refs/tags/}"
          [ -z "$tag" ] && tag="${{ github.event.ref }}"
          [ -z "$tag" ] && tag="${{ github.ref_name }}"
          version="${tag#v}"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Download windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: release

      - name: Download icon artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: app-icon
          path: assets/icons

      - name: Download editor icon artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: editor-icon
          path: assets/icons

      # 혹시 아티팩트가 없을 경우를 대비해 PNG→ICO 재생성도 시도(있으면 스킵)
      - name: Fallback - build icon from PNG if missing
        shell: pwsh
        continue-on-error: true
        run: |
          $code = @'
          from PIL import Image
          import os
          def make_icon(png, ico):
            if os.path.exists(png) and not os.path.exists(ico):
              src = Image.open(png).convert("RGBA")
              sizes=[(16,16),(24,24),(32,32),(48,48),(64,64),(128,128),(256,256)]
              src.save(ico, format="ICO", sizes=sizes)
          make_icon("assets/icons/appicon.png", "assets/icons/app.ico")
          make_icon("assets/icons/editoricon.png", "assets/icons/editor.ico")
          '@
          Set-Content gen_ico.py $code -Encoding UTF8
          python gen_ico.py

      - name: Install Inno Setup
        shell: pwsh
        run: |
          choco install innosetup --no-progress -y
          $env:Path += ";C:\Program Files (x86)\Inno Setup 6"

      - name: Compile Editor Installer
        shell: pwsh
        if: ${{ hashFiles('release/latest-editor.zip') != '' && hashFiles('release/latest-editor.sha256') != '' && hashFiles('editor_installer.iss') != '' }}
        run: |
          $ownerRepo = "${env:GITHUB_REPOSITORY}"
          $version='${{ steps.rtag.outputs.version }}'
          $zipURL = "https://github.com/$ownerRepo/releases/latest/download/latest-editor.zip"
          $shaURL = "https://github.com/$ownerRepo/releases/latest/download/latest-editor.sha256"
          iscc /DMyAppName="${env:EDITOR_APPNAME}" /DMyAppVersion="$version" /DMyAppExe="${env:EDITOR_EXE}" /DPayloadZipURL="$zipURL" /DPayloadShaURL="$shaURL" editor_installer.iss
          New-Item -ItemType Directory -Force -Path release | Out-Null
          $outExe=".\Output\${env:EDITOR_APPNAME}-Online-Setup.exe"
          if (!(Test-Path $outExe)) { Write-Error "Editor installer missing"; exit 1 }
          Copy-Item $outExe "release/${env:EDITOR_APPNAME}-Online-Setup.exe" -Force

      - name: Compile Game Installer
        shell: pwsh
        if: ${{ hashFiles('release/latest-game.zip') != '' && hashFiles('release/latest-game.sha256') != '' && hashFiles('game_installer.iss') != '' }}
        run: |
          $ownerRepo = "${env:GITHUB_REPOSITORY}"
          $version='${{ steps.rtag.outputs.version }}'
          $zipURL = "https://github.com/$ownerRepo/releases/latest/download/latest-game.zip"
          $shaURL = "https://github.com/$ownerRepo/releases/latest/download/latest-game.sha256"
          iscc /DMyAppName="${env:GAME_APPNAME}" /DMyAppVersion="$version" /DMyAppExe="${env:GAME_EXE}" /DPayloadZipURL="$zipURL" /DPayloadShaURL="$shaURL" game_installer.iss
          $outExe=".\Output\${env:GAME_APPNAME}-Online-Setup.exe"
          if (!(Test-Path $outExe)) { Write-Error "Game installer missing"; exit 1 }
          Copy-Item $outExe "release/${env:GAME_APPNAME}-Online-Setup.exe" -Force

      - name: Upload installers
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: release/*Setup.exe

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'create' && github.event.ref_type == 'tag') ||
      (github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Resolve tag
        id: rtag
        shell: bash
        run: |
          tag="${GITHUB_REF##refs/tags/}"
          [ -z "$tag" ] && tag="${{ github.event.ref }}"
          [ -z "$tag" ] && tag="${{ github.ref_name }}"
          version="${tag#v}"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-build.txt
          pip install pyinstaller
      - name: Build Editor
        run: |
          pyinstaller -F --windowed -n "$EDITOR_APPNAME" "$EDITOR_ENTRY"
          v='${{ steps.rtag.outputs.version }}'
          mkdir -p release
          zip -j "release/${EDITOR_APPNAME}-${v}-macos.zip" "dist/${EDITOR_APPNAME}"
      - name: Build Game
        run: |
          pyinstaller -F --windowed -n "$GAME_APPNAME" "$GAME_ENTRY"
          v='${{ steps.rtag.outputs.version }}'
          zip -j "release/game-${v}-macos.zip" "dist/${GAME_APPNAME}"
      - name: Upload mac artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: release/*.zip

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'create' && github.event.ref_type == 'tag') ||
      (github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Resolve tag
        id: rtag
        shell: bash
        run: |
          tag="${GITHUB_REF##refs/tags/}"
          [ -z "$tag" ] && tag="${{ github.event.ref }}"
          [ -z "$tag" ] && tag="${{ github.ref_name }}"
          version="${tag#v}"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Install Tk + deps
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk
          python -m pip install --upgrade pip
          pip install -r requirements-build.txt
          pip install pyinstaller
      - name: Build Editor
        run: |
          pyinstaller -F -n branching-novel-editor "$EDITOR_ENTRY"
          v='${{ steps.rtag.outputs.version }}'
          mkdir -p release
          zip -j "release/branching-novel-editor-${v}-linux-x64.zip" "dist/branching-novel-editor"
      - name: Build Game
        run: |
          pyinstaller -F -n branching-novel-gui "$GAME_ENTRY"
          v='${{ steps.rtag.outputs.version }}'
          zip -j "release/game-${v}-linux-x64.zip" "dist/branching-novel-gui"
      - name: Upload linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: release/*.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-inno-installers, build-macos, build-linux]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Resolve tag
        id: rtag
        shell: bash
        run: |
          tag="${GITHUB_REF##refs/tags/}"
          [ -z "$tag" ] && tag="${{ github.event.ref }}"
          [ -z "$tag" ] && tag="${{ github.ref_name }}"
          version="${tag#v}"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Download artifacts (any)
        uses: actions/download-artifact@v4
        with:
          path: release
          pattern: "*"
          merge-multiple: true

      - name: Generate SHA256SUMS (if any zips)
        run: |
          cd release
          if ls *.zip >/dev/null 2>&1; then
            sha256sum *.zip > SHA256SUMS.txt
          else
            echo "No zip artifacts found." > SHA256SUMS.txt
          fi
          cd ..

      - name: Compose Release Notes
        shell: bash
        run: |
          v='${{ steps.rtag.outputs.version }}'
          cat > RELEASE_BODY.md <<'EOF'
          # Branching Novel Tools — Release __V__

          ## Windows (installers)
          - Editor: `BranchingNovelEditor-Online-Setup.exe`
          - Game: `BranchingNovelGUI-Online-Setup.exe`

          ## Portable Zips
          - Windows: `BranchingNovelEditor-__V__-windows-x64.zip`, `game-__V__-windows-x64.zip`
          - macOS:   `BranchingNovelEditor-__V__-macos.zip`, `game-__V__-macos.zip`
          - Linux:   `branching-novel-editor-__V__-linux-x64.zip`, `game-__V__-linux-x64.zip`

          ## Online installers fetch from the latest release:
          - Editor: `releases/latest/download/latest-editor.zip` (+ `.sha256`)
          - Game: `releases/latest/download/latest-game.zip` (+ `.sha256`)

          ## Checksums
          See `SHA256SUMS.txt`.
          EOF
          sed -i "s/__V__/${v}/g" RELEASE_BODY.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.rtag.outputs.tag }}
          tag_name: ${{ steps.rtag.outputs.tag }}
          body_path: RELEASE_BODY.md
          files: |
            release/*.zip
            release/*.sha256
            release/*Setup.exe
            release/SHA256SUMS.txt
          make_latest: true
          draft: false
          prerelease: false
          allowUpdates: true        # ← 이미 있는 릴리스를 업데이트
          remove_assets: true       # ← 기존 에셋 제거 후 새 파일 업로드(파일 교체 확실)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
