name: Build & Release (Editor + Viewer)

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

env:
  PYTHON_VERSION: "3.11"
  EDITOR_APPNAME: "BranchingNovelEditor"
  VIEWER_APPNAME: "BranchingNovelGUI"
  EDITOR_ENTRY: "branching_novel_editor.py"
  VIEWER_ENTRY: "branching_novel.py"      # 파일명 맞게 수정
  EDITOR_EXE: "BranchingNovelEditor.exe"
  VIEWER_EXE: "BranchingNovelGUI.exe"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-build.txt
          pip install pyinstaller pillow

      - name: (Optional) Generate .ico from PNG
        shell: pwsh
        run: |
          if (Test-Path assets/icons/appicon.png) {
            $code = @'
          from PIL import Image
          src = Image.open("assets/icons/appicon.png").convert("RGBA")
          sizes = [(16,16),(24,24),(32,32),(48,48),(64,64),(128,128),(256,256)]
          imgs = [src.resize(s, Image.LANCZOS) for s in sizes]
          imgs[0].save("assets/icons/app.ico", format="ICO", sizes=sizes)
          '@
            Set-Content gen_ico.py $code -Encoding UTF8
            python gen_ico.py
          } else {
            echo "no PNG icon, skip ico generation"
          }

      - name: Build Editor (folder mode)
        shell: pwsh
        run: |
          $iconArg = (Test-Path assets/icons/app.ico) ? "--icon assets/icons/app.ico" : ""
          pyinstaller --noconfirm --windowed -n $env:EDITOR_APPNAME $iconArg $env:EDITOR_ENTRY
          if (!(Test-Path "dist/$env:EDITOR_APPNAME")) { Write-Error "Editor dist missing"; exit 1 }
          New-Item -ItemType Directory -Force -Path release | Out-Null
          $version = "${env:GITHUB_REF_NAME}"
          if ($version.StartsWith("refs/tags/")) { $version = $version.Substring(10) }
          if ($version.StartsWith("v")) { $version = $version.Substring(1) }
          $verZip = "release/${env:EDITOR_APPNAME}-$version-windows-x64.zip"
          Compress-Archive -Path "dist/${env:EDITOR_APPNAME}/*" -DestinationPath $verZip
          Copy-Item $verZip "release/latest-editor.zip" -Force
          $h = (Get-FileHash "release/latest-editor.zip" -Algorithm SHA256).Hash.ToLower()
          "$h  latest-editor.zip" | Out-File -Encoding ascii "release/latest-editor.sha256"

      - name: Build Viewer (folder mode)
        shell: pwsh
        run: |
          $iconArg = (Test-Path assets/icons/app.ico) ? "--icon assets/icons/app.ico" : ""
          pyinstaller --noconfirm --windowed -n $env:VIEWER_APPNAME $iconArg $env:VIEWER_ENTRY
          if (!(Test-Path "dist/$env:VIEWER_APPNAME")) { Write-Error "Viewer dist missing"; exit 1 }
          $version = "${env:GITHUB_REF_NAME}"
          if ($version.StartsWith("refs/tags/")) { $version = $version.Substring(10) }
          if ($version.StartsWith("v")) { $version = $version.Substring(1) }
          $verZip = "release/${env:VIEWER_APPNAME}-$version-windows-x64.zip"
          Compress-Archive -Path "dist/${env:VIEWER_APPNAME}/*" -DestinationPath $verZip
          Copy-Item $verZip "release/latest-viewer.zip" -Force
          $h = (Get-FileHash "release/latest-viewer.zip" -Algorithm SHA256).Hash.ToLower()
          "$h  latest-viewer.zip" | Out-File -Encoding ascii "release/latest-viewer.sha256"

      - name: Upload windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-zips
          path: release/*

  build-inno-installers:
    runs-on: windows-latest
    needs: build-windows
    steps:
      - uses: actions/checkout@v4
      - name: Download windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-zips
          path: release

      - name: Install Inno Setup
        shell: pwsh
        run: |
          choco install innosetup --no-progress -y
          $env:Path += ";C:\Program Files (x86)\Inno Setup 6"

      - name: Compile Editor Installer
        shell: pwsh
        run: |
          $ownerRepo = "${env:GITHUB_REPOSITORY}"
          $version = "${env:GITHUB_REF_NAME}"
          if ($version.StartsWith("refs/tags/")) { $version = $version.Substring(10) }
          if ($version.StartsWith("v")) { $version = $version.Substring(1) }
          $zipURL = "https://github.com/$ownerRepo/releases/latest/download/latest-editor.zip"
          $shaURL = "https://github.com/$ownerRepo/releases/latest/download/latest-editor.sha256"
          iscc `
            /DMyAppName="${env:EDITOR_APPNAME}" `
            /DMyAppVersion="$version" `
            /DMyAppExe="${env:EDITOR_EXE}" `
            /DPayloadZipURL="$zipURL" `
            /DPayloadShaURL="$shaURL" `
            installer.iss
          New-Item -ItemType Directory -Force -Path release | Out-Null
          Copy-Item ".\Output\${env:EDITOR_APPNAME}-Online-Setup.exe" "release/${env:EDITOR_APPNAME}-Online-Setup.exe" -Force

      - name: Compile Viewer Installer
        shell: pwsh
        run: |
          $ownerRepo = "${env:GITHUB_REPOSITORY}"
          $version = "${env:GITHUB_REF_NAME}"
          if ($version.StartsWith("refs/tags/")) { $version = $version.Substring(10) }
          if ($version.StartsWith("v")) { $version = $version.Substring(1) }
          $zipURL = "https://github.com/$ownerRepo/releases/latest/download/latest-viewer.zip"
          $shaURL = "https://github.com/$ownerRepo/releases/latest/download/latest-viewer.sha256"
          iscc `
            /DMyAppName="${env:VIEWER_APPNAME}" `
            /DMyAppVersion="$version" `
            /DMyAppExe="${env:VIEWER_EXE}" `
            /DPayloadZipURL="$zipURL" `
            /DPayloadShaURL="$shaURL" `
            installer.iss
          Copy-Item ".\Output\${env:VIEWER_APPNAME}-Online-Setup.exe" "release/${env:VIEWER_APPNAME}-Online-Setup.exe" -Force

      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: release/*Setup.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-build.txt
          pip install pyinstaller
      - name: Build Editor
        run: |
          pyinstaller -F --windowed -n "$EDITOR_APPNAME" "$EDITOR_ENTRY"
          version="${GITHUB_REF_NAME#refs/tags/}"; version="${version#v}"
          mkdir -p release
          zip -j "release/${EDITOR_APPNAME}-${version}-macos.zip" "dist/${EDITOR_APPNAME}"
      - name: Build Viewer
        run: |
          pyinstaller -F --windowed -n "$VIEWER_APPNAME" "$VIEWER_ENTRY"
          version="${GITHUB_REF_NAME#refs/tags/}"; version="${version#v}"
          zip -j "release/${VIEWER_APPNAME}-${version}-macos.zip" "dist/${VIEWER_APPNAME}"
      - name: Upload mac artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-zips
          path: release/*.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Tk + deps
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk
          python -m pip install --upgrade pip
          pip install -r requirements-build.txt
          pip install pyinstaller
      - name: Build Editor
        run: |
          pyinstaller -F -n branching-novel-editor "$EDITOR_ENTRY"
          version="${GITHUB_REF_NAME#refs/tags/}"; version="${version#v}"
          mkdir -p release
          zip -j "release/branching-novel-editor-${version}-linux-x64.zip" "dist/branching-novel-editor"
      - name: Build Viewer
        run: |
          pyinstaller -F -n branching-novel-gui "$VIEWER_ENTRY"
          version="${GITHUB_REF_NAME#refs/tags/}"; version="${version#v}"
          zip -j "release/branching-novel-gui-${version}-linux-x64.zip" "dist/branching-novel-gui"
      - name: Upload linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-zips
          path: release/*.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-inno-installers, build-macos, build-linux]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          merge-multiple: true
          path: release

      - name: Generate SHA256SUMS (all zips)
        run: |
          cd release
          if ls *.zip >/dev/null 2>&1; then
            sha256sum *.zip > SHA256SUMS.txt
          else
            echo "No zip artifacts found." > SHA256SUMS.txt
          fi
          cd ..

      - name: Compose Release Notes
        run: |
          VERSION="${GITHUB_REF_NAME#refs/tags/}"; VERSION="${VERSION#v}"
          cat > RELEASE_BODY.md <<'EOF'
          # Branching Novel Tools — Release __VERSION__

          ## Windows (Recommended)
          - Editor (Installer): `BranchingNovelEditor-Online-Setup.exe`
          - Viewer (Installer): `BranchingNovelGUI-Online-Setup.exe`

          ## Portable Zips
          - Windows:
            - `BranchingNovelEditor-__VERSION__-windows-x64.zip`
            - `BranchingNovelGUI-__VERSION__-windows-x64.zip`
          - macOS:
            - `BranchingNovelEditor-__VERSION__-macos.zip`
            - `BranchingNovelGUI-__VERSION__-macos.zip`
          - Linux:
            - `branching-novel-editor-__VERSION__-linux-x64.zip`
            - `branching-novel-gui-__VERSION__-linux-x64.zip`

          ## Online Installers (how they work)
          - Each installer downloads `latest-*.zip` from the latest release:
            - Editor: `releases/latest/download/latest-editor.zip` (+ `.sha256`)
            - Viewer: `releases/latest/download/latest-viewer.zip` (+ `.sha256`)
          - To update users, publish a new release; URLs stay constant.

          ## macOS
          - First launch may require right-click → Open.
          - Or: `xattr -dr com.apple.quarantine ./<binary>`

          ## Linux
          - `chmod +x ./<binary>` before running if needed.

          ## Checksums
          See `SHA256SUMS.txt`.

          ## License
          MIT.
          EOF
          sed -i "s/__VERSION__/${VERSION}/g" RELEASE_BODY.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body_path: RELEASE_BODY.md
          files: |
            release/*.zip
            release/*Setup.exe
            release/latest-editor.zip
            release/latest-editor.sha256
            release/latest-viewer.zip
            release/latest-viewer.sha256
            release/SHA256SUMS.txt
          make_latest: true
          draft: false
          prerelease: false
