"""Simple auto-update helper for Windows builds.

This module checks the latest release on GitHub and, when a newer version is
available, offers to download and run the installer.  The actual repository is
read from the ``GITHUB_REPO`` environment variable.  If it is not provided the
default ``"owner/TextGameScript"`` is used and should be replaced during the
build process.  The currently installed version is obtained from the standard
Inno Setup registry key.

The function is intentionally light-weight and uses only the Python standard
library so it can run inside the PyInstaller executables generated by the
workflow.
"""

from __future__ import annotations

import json
import os
import platform
import subprocess
import tempfile
import urllib.request
from tkinter import messagebox

from i18n import tr


GITHUB_REPO = os.environ.get("GITHUB_REPO", "owner/TextGameScript")

if platform.system() == "Windows":
    import winreg  # type: ignore[import-not-found]
else:  # pragma: no cover - non-Windows
    winreg = None  # type: ignore[misc]


def _ver_tuple(ver: str) -> tuple[int, ...]:
    return tuple(int(p) for p in ver.split(".") if p.isdigit())


def _get_installed_version(app_name: str) -> str:
    """Return installed version from the Inno Setup registry key."""
    if winreg is None:
        return "0"
    try:
        key_path = (
            "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\"
            f"{app_name}_is1"
        )
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path) as key:
            return winreg.QueryValueEx(key, "DisplayVersion")[0]
    except OSError:
        return "0"


def check_for_update(app_name: str, installer_name: str, *, parent=None) -> None:
    """Check GitHub for a newer release and optionally run the installer.

    Parameters
    ----------
    app_name: str
        Display name of the application.
    installer_name: str
        Expected asset name of the installer in the GitHub release.
    parent: tkinter widget, optional
        Parent widget for message boxes.
    """

    if platform.system() != "Windows":
        return

    current_version = _get_installed_version(app_name)

    try:
        url = f"https://api.github.com/repos/{GITHUB_REPO}/releases/latest"
        with urllib.request.urlopen(url, timeout=5) as resp:
            data = json.load(resp)
        tag = data.get("tag_name", "")
        latest = tag[1:] if tag.startswith("v") else tag
        if _ver_tuple(latest) <= _ver_tuple(current_version):
            return

        msg = tr("update_available", app=app_name, ver=latest)
        if not messagebox.askyesno(tr("update_title"), msg, parent=parent):
            return

        asset_url = None
        for asset in data.get("assets", []):
            if asset.get("name") == installer_name:
                asset_url = asset.get("browser_download_url")
                break
        if not asset_url:
            return

        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".exe")
        tmp.close()
        urllib.request.urlretrieve(asset_url, tmp.name)
        subprocess.Popen([tmp.name, "/VERYSILENT", "/NORESTART"])
        messagebox.showinfo(tr("update_title"), tr("update_started"), parent=parent)
    except Exception:
        # Update failures are silently ignored
        pass


__all__ = ["check_for_update"]

